{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started This repository of notes is intended for quick reference, especially for beginners. This is not a textbook. Focus of each note is to provide minimal, dense, clutterfree info for the reader to get started. Step 1: Setting up First you need to have a clean linux operating system setup. You can install Ubuntu 20.04 on VirtualBox or VMWare workstation if you have a laptop with 4-8GB RAM. Install Visual Studio Code or any other code editor you prefer. Install Git on your laptop. Sign up for an account on Github. Then setup SSH access. Step 2: Working locally Fork the original repository to your own account. Clone your forked repository to your laptop. Install python-virtualenv and setup a virtualenv with name 'venv' in the code folder. Activate the virtualenv and install the pip dependencies . Start the local development server with: mkdocs serve Step 3: Submit a pull request Open the folder in the editor. Understand how material for mkdocs works. Make edits in the docs folder to edit the contents. Navigate to your local deployment to test the changes. Keep making changes till you are satisfied. Then commit the changes . Push to your github account with git push . Navigate to the forked repository in your github account using your browser and submit a pull request to the original repository. Raise a github issue on the original repository , if you face any issues.","title":"Getting started"},{"location":"#getting-started","text":"This repository of notes is intended for quick reference, especially for beginners. This is not a textbook. Focus of each note is to provide minimal, dense, clutterfree info for the reader to get started.","title":"Getting Started"},{"location":"#step-1-setting-up","text":"First you need to have a clean linux operating system setup. You can install Ubuntu 20.04 on VirtualBox or VMWare workstation if you have a laptop with 4-8GB RAM. Install Visual Studio Code or any other code editor you prefer. Install Git on your laptop. Sign up for an account on Github. Then setup SSH access.","title":"Step 1: Setting up"},{"location":"#step-2-working-locally","text":"Fork the original repository to your own account. Clone your forked repository to your laptop. Install python-virtualenv and setup a virtualenv with name 'venv' in the code folder. Activate the virtualenv and install the pip dependencies . Start the local development server with: mkdocs serve","title":"Step 2: Working locally"},{"location":"#step-3-submit-a-pull-request","text":"Open the folder in the editor. Understand how material for mkdocs works. Make edits in the docs folder to edit the contents. Navigate to your local deployment to test the changes. Keep making changes till you are satisfied. Then commit the changes . Push to your github account with git push . Navigate to the forked repository in your github account using your browser and submit a pull request to the original repository. Raise a github issue on the original repository , if you face any issues.","title":"Step 3: Submit a pull request"},{"location":"basics/","text":"Basics: Overview Each point in this page needs to be converted to a separate note. Please contribute with a pull request. Operating System Installing a functional UNIX/Linux operating system. Getting an overview of the filesystem Understanding file permissions, users & PATH Installing software packages that you need Command Line ls, cp, mv, rm, mkdir, rmdir, chmod, cat, export . .. | > >> & grep, find, sh, ps, top, less, tail, alias ssh, scp Git Typical workflow in Git Creating account on github with SSH access git basics: clone, pull, status, diff, add, commit, reset, push Working with branches: checkout, rebase, merge Docs mkdocs: The documentation system Markdown: The syntax used by mkdocs for creating content","title":"Overview"},{"location":"basics/#basics-overview","text":"Each point in this page needs to be converted to a separate note. Please contribute with a pull request.","title":"Basics: Overview"},{"location":"basics/#operating-system","text":"Installing a functional UNIX/Linux operating system. Getting an overview of the filesystem Understanding file permissions, users & PATH Installing software packages that you need","title":"Operating System"},{"location":"basics/#command-line","text":"ls, cp, mv, rm, mkdir, rmdir, chmod, cat, export . .. | > >> & grep, find, sh, ps, top, less, tail, alias ssh, scp","title":"Command Line"},{"location":"basics/#git","text":"Typical workflow in Git Creating account on github with SSH access git basics: clone, pull, status, diff, add, commit, reset, push Working with branches: checkout, rebase, merge","title":"Git"},{"location":"basics/#docs","text":"mkdocs: The documentation system Markdown: The syntax used by mkdocs for creating content","title":"Docs"},{"location":"guidelines/","text":"Guidelines Composing a note Don't try to give a detailed description of a concept or a technology. Just one easy to understand line should be sufficient. Instead, focus on the detailed steps to get started. For example: how to install the package or what command to run or what file to look for etc. Don't explain anything in too much detail. Keep the info concise. Each point must not be more than 3-4 sentences. Add links to external sources for elaborate reading. But summarize the external source in the note. Link to reliable sources as much as possible like other documentation sites, stackoverflow etc. Avoid linking to random articles. Those articles may be taken down or the link may be changed or the content may be changed, which leads to broken / misleading information. In such cases, try to avoid the link by summarizing the necessary info directly in the note. Link to other notes as much as possible. As this repository is built for reference, each note may be read independently. Having a quick link to another note that clarifies a concept or gives background is very helpful. Formatting a note Separate points at the first level using paragraphs. Separate points at the second level using bullets. Use H2 or ## for side headings. Keep side headings short. Avoid long descriptive sentences as the side headings will be used to create the Table of Contents on the right of the page. Avoid \":\" at the end of headings. Use \":\" for bullet point descriptions. Use numbered bullets for steps or other ordered lists. Use '-' for unordered lists. No space before a comma. Space always after a comma. All bullets should start with a capital letter. Basics ;-)","title":"Guidelines"},{"location":"guidelines/#guidelines","text":"","title":"Guidelines"},{"location":"guidelines/#composing-a-note","text":"Don't try to give a detailed description of a concept or a technology. Just one easy to understand line should be sufficient. Instead, focus on the detailed steps to get started. For example: how to install the package or what command to run or what file to look for etc. Don't explain anything in too much detail. Keep the info concise. Each point must not be more than 3-4 sentences. Add links to external sources for elaborate reading. But summarize the external source in the note. Link to reliable sources as much as possible like other documentation sites, stackoverflow etc. Avoid linking to random articles. Those articles may be taken down or the link may be changed or the content may be changed, which leads to broken / misleading information. In such cases, try to avoid the link by summarizing the necessary info directly in the note. Link to other notes as much as possible. As this repository is built for reference, each note may be read independently. Having a quick link to another note that clarifies a concept or gives background is very helpful.","title":"Composing a note"},{"location":"guidelines/#formatting-a-note","text":"Separate points at the first level using paragraphs. Separate points at the second level using bullets. Use H2 or ## for side headings. Keep side headings short. Avoid long descriptive sentences as the side headings will be used to create the Table of Contents on the right of the page. Avoid \":\" at the end of headings. Use \":\" for bullet point descriptions. Use numbered bullets for steps or other ordered lists. Use '-' for unordered lists. No space before a comma. Space always after a comma. All bullets should start with a capital letter. Basics ;-)","title":"Formatting a note"},{"location":"stuck/","text":"Getting Stuck Stuckness shouldn't be avoided. It's the psychic predecessor of all real understanding. An egoless acceptance of stuckness is a key to an understanding of all Quality, in mechanical work as in other endeavors. It's this understanding of Quality as revealed by stuckness which so often makes self-taught mechanics so superior to institute-trained men who have learned how to handle everything except a new situation. -- Zen and the art of motorcycle maintenance (Robert M. Pirsig) This is where the real fun begins. Google Always, the first thing to do when stuck is ask google. Google for: error messages, keywords, describing the problem. Google in 5-6 different ways. Don't expect exact solutions. Look for posts that explain what is going on, so that you can understand enough to solve your issue. Stackoverflow results are most useful. Documentation sites next. Github issue discussions third. Finally personal blogs. Experiment As you keep learning more from googling, try experimenting on your own as well. Add print messages generously. This is the direct and most useful method. If you're on the browser, open developer tools and setup breakpoints. Try breaking your change into smaller changes and go step by step to see which step is the issue. Keep commits as small as possible. Even single lines. Test before every commit. So, that when you have an error, you have a smaller surface area for the bug to hide. When you are not sure what is happening under the hood, experiment to understand even if there is no bug. That understanding will pay disproportionately in the long run. Experimenting is the most fun way of learning things. Get out of the box Switch off for the day and start afresh the next day. Try to explain your problem to a friend. Just going over the problem again help see something you might have missed or come up with new ideas. Write a note on what got you stuck and the approaches you tried. Ask for help As a last effort, if you can't find any info through google and your own experiments haven't been insightful, you can ask for help. But, 99.99% of the time, this shouldn't be needed.","title":"Getting stuck"},{"location":"stuck/#getting-stuck","text":"Stuckness shouldn't be avoided. It's the psychic predecessor of all real understanding. An egoless acceptance of stuckness is a key to an understanding of all Quality, in mechanical work as in other endeavors. It's this understanding of Quality as revealed by stuckness which so often makes self-taught mechanics so superior to institute-trained men who have learned how to handle everything except a new situation. -- Zen and the art of motorcycle maintenance (Robert M. Pirsig) This is where the real fun begins.","title":"Getting Stuck"},{"location":"stuck/#google","text":"Always, the first thing to do when stuck is ask google. Google for: error messages, keywords, describing the problem. Google in 5-6 different ways. Don't expect exact solutions. Look for posts that explain what is going on, so that you can understand enough to solve your issue. Stackoverflow results are most useful. Documentation sites next. Github issue discussions third. Finally personal blogs.","title":"Google"},{"location":"stuck/#experiment","text":"As you keep learning more from googling, try experimenting on your own as well. Add print messages generously. This is the direct and most useful method. If you're on the browser, open developer tools and setup breakpoints. Try breaking your change into smaller changes and go step by step to see which step is the issue. Keep commits as small as possible. Even single lines. Test before every commit. So, that when you have an error, you have a smaller surface area for the bug to hide. When you are not sure what is happening under the hood, experiment to understand even if there is no bug. That understanding will pay disproportionately in the long run. Experimenting is the most fun way of learning things.","title":"Experiment"},{"location":"stuck/#get-out-of-the-box","text":"Switch off for the day and start afresh the next day. Try to explain your problem to a friend. Just going over the problem again help see something you might have missed or come up with new ideas. Write a note on what got you stuck and the approaches you tried.","title":"Get out of the box"},{"location":"stuck/#ask-for-help","text":"As a last effort, if you can't find any info through google and your own experiments haven't been insightful, you can ask for help. But, 99.99% of the time, this shouldn't be needed.","title":"Ask for help"},{"location":"basics/markdown/","text":"Markdown Markdown is a human readable plain text format for creating HTML content. A markdown file with a .md extension can be converted to a .html file which can be rendered / viewed in a web browser. A lot of online web tools like forums, blogs, static site generators and other websites like GitHub have support for Markdown. A block of markdown can be converted to a block of HTML. For example: # Title ### Sub title gets converted to: < h1 > Title </ h1 > < h3 > Sub title </ h3 > mkdocs mkdocs the documentation generator used for this project also uses Markdown for its content. So, we can write notes in markdown and mkdocs will convert that note into structured HTML pages that can be read on a browser. Cheat sheet A frequently used list of markdown elements Element Markdown Syntax Heading # H1 ## H2 ### H3 Bold __bold text__ **bold text** Italic _italicized text_ *italicized text* Blockquote > blockquote Ordered List 1. First item 2. Second item 3. Third item Unordered List - First item - Second item - Third item Code 'code' Horizontal Rule --- Link [Google](https://www.google.com) Table | Syntax | Description | | ------ | ----------- | | Header | Title | | Paragraph | Text | Task List - [x] Write code - [ ] Update the website - [ ] Contact the manager References Basic Writing and formatting syntax Advanced formatting Writing on GitHub","title":"Markdown"},{"location":"basics/markdown/#markdown","text":"Markdown is a human readable plain text format for creating HTML content. A markdown file with a .md extension can be converted to a .html file which can be rendered / viewed in a web browser. A lot of online web tools like forums, blogs, static site generators and other websites like GitHub have support for Markdown. A block of markdown can be converted to a block of HTML. For example: # Title ### Sub title gets converted to: < h1 > Title </ h1 > < h3 > Sub title </ h3 > mkdocs mkdocs the documentation generator used for this project also uses Markdown for its content. So, we can write notes in markdown and mkdocs will convert that note into structured HTML pages that can be read on a browser.","title":"Markdown"},{"location":"basics/markdown/#cheat-sheet","text":"A frequently used list of markdown elements Element Markdown Syntax Heading # H1 ## H2 ### H3 Bold __bold text__ **bold text** Italic _italicized text_ *italicized text* Blockquote > blockquote Ordered List 1. First item 2. Second item 3. Third item Unordered List - First item - Second item - Third item Code 'code' Horizontal Rule --- Link [Google](https://www.google.com) Table | Syntax | Description | | ------ | ----------- | | Header | Title | | Paragraph | Text | Task List - [x] Write code - [ ] Update the website - [ ] Contact the manager","title":"Cheat sheet"},{"location":"basics/markdown/#references","text":"Basic Writing and formatting syntax Advanced formatting Writing on GitHub","title":"References"},{"location":"basics/mkdocs/","text":"MkDocs Mkdocs is a static site generator that is mainly used for documentation. mkdocs \"builds\" (or generates) HTML documentation from content files written in Markdown . It comes with a built in development server to preview the documentation locally and a feature to deploy a live version to Github Pages . It can be configured using a single YAML file mkdocs.yml present in the root directory. Requirements Python (as MkDocs is a Python package) To check if python is installed on your system run python --version in the command line. If the output is something like Python 3.10.6 then you have python installed, skip to pip. If the output is something like Command 'python' not found,... then run sudo apt-get install python3 and follow the commands to get python installed in your system. pip (most common python package manager) To check if you already have pip installed run pip --version in the command line. If the output is something like pip 22.0.2 from /usr/lib/python3/dist-packages/pip (python 3.10) then you have pip installed, skip to MkDocs installation. If the output is something like Command 'pip' not found,... then first run sudo apt update then run sudo apt install python3-pip , confirm for the pip installation. TODO: Installing python & pip should be moved into a separate note as it may be referred by multiple sources. DRY. TODO: Add instructions to setup a virtualenv to maintain a clean environment Installation To install mkdocs run pip install mkdocs , to confirm the installation run mkdocs --version . Then you require to install material (theme of mkdocs used in the project) using pip install mkdocs-material run mkdocs serve in the project directory to start a local development server. If you are able to see the project deployed then installation was successful. Workflow In the project folder there is a docs folder which contains all the markdown files used to build the documentation, by convention docs/index.md is the homepage. You can add content by editing the files or adding a new file. Below is step by step workflow for adding & publishing a new note: Add a note: First check under which directory in docs you need to add the file, you can do so by checking the note's place in the site tree, which is mentioned in the nav: in the mkdocs.yml file. Add and edit note_name.md in the proper directory and save it. Preview the note: run mkdocs serve it starts a local development server to see how the site will look published. after every edit just save your edits locally and the page auto-updates itself. Publish to GitHub Pages: once you are done making edits on the project you can publish the project on github pages, run mkdocs gh-deploy to do so. this will build the docs and commit them to gh-pages branch and push the gh-pages branch to GitHub and documentation should appear at <username>.github.io/<repository> . mkdocs serve doesn't generate the build folder. It directly serves from the markdown files. The build folder site can be generated by using mkdocs build , if necessary. mkdocs gh-deploy builds the documentation and adds all the build output files to a separate gh-pages branch and commits and pushes to GitHub triggering a publish. mkdocs.yml A quick reference for key settings: site_name is displayed on the top left of the documentation site. theme sets the theme name and theme specific configuration. Learn more. nav defines the structure of the sidebar in the \" - Title: ./file/path\" format.","title":"mkdocs"},{"location":"basics/mkdocs/#mkdocs","text":"Mkdocs is a static site generator that is mainly used for documentation. mkdocs \"builds\" (or generates) HTML documentation from content files written in Markdown . It comes with a built in development server to preview the documentation locally and a feature to deploy a live version to Github Pages . It can be configured using a single YAML file mkdocs.yml present in the root directory.","title":"MkDocs"},{"location":"basics/mkdocs/#requirements","text":"Python (as MkDocs is a Python package) To check if python is installed on your system run python --version in the command line. If the output is something like Python 3.10.6 then you have python installed, skip to pip. If the output is something like Command 'python' not found,... then run sudo apt-get install python3 and follow the commands to get python installed in your system. pip (most common python package manager) To check if you already have pip installed run pip --version in the command line. If the output is something like pip 22.0.2 from /usr/lib/python3/dist-packages/pip (python 3.10) then you have pip installed, skip to MkDocs installation. If the output is something like Command 'pip' not found,... then first run sudo apt update then run sudo apt install python3-pip , confirm for the pip installation. TODO: Installing python & pip should be moved into a separate note as it may be referred by multiple sources. DRY. TODO: Add instructions to setup a virtualenv to maintain a clean environment","title":"Requirements"},{"location":"basics/mkdocs/#installation","text":"To install mkdocs run pip install mkdocs , to confirm the installation run mkdocs --version . Then you require to install material (theme of mkdocs used in the project) using pip install mkdocs-material run mkdocs serve in the project directory to start a local development server. If you are able to see the project deployed then installation was successful.","title":"Installation"},{"location":"basics/mkdocs/#workflow","text":"In the project folder there is a docs folder which contains all the markdown files used to build the documentation, by convention docs/index.md is the homepage. You can add content by editing the files or adding a new file. Below is step by step workflow for adding & publishing a new note: Add a note: First check under which directory in docs you need to add the file, you can do so by checking the note's place in the site tree, which is mentioned in the nav: in the mkdocs.yml file. Add and edit note_name.md in the proper directory and save it. Preview the note: run mkdocs serve it starts a local development server to see how the site will look published. after every edit just save your edits locally and the page auto-updates itself. Publish to GitHub Pages: once you are done making edits on the project you can publish the project on github pages, run mkdocs gh-deploy to do so. this will build the docs and commit them to gh-pages branch and push the gh-pages branch to GitHub and documentation should appear at <username>.github.io/<repository> . mkdocs serve doesn't generate the build folder. It directly serves from the markdown files. The build folder site can be generated by using mkdocs build , if necessary. mkdocs gh-deploy builds the documentation and adds all the build output files to a separate gh-pages branch and commits and pushes to GitHub triggering a publish.","title":"Workflow"},{"location":"basics/mkdocs/#mkdocsyml","text":"A quick reference for key settings: site_name is displayed on the top left of the documentation site. theme sets the theme name and theme specific configuration. Learn more. nav defines the structure of the sidebar in the \" - Title: ./file/path\" format.","title":"mkdocs.yml"}]}